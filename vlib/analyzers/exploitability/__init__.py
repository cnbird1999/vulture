import sys, os, logging
sys.path.append(os.path.dirname(__file__))

log = logging.getLogger()

from functools import partial

from exploitable import exploitable

def get_exploitability(results, path):
    try:
        t,c = exploitable(path)
    except Exception as e:
        log.warning("exploitable failed for %s" % path)
        log.exception(e)
        c = {}
    bug_id_str = path.strip("/").split("/")[-1]
    results[bug_id_str] = c

def get_scores(bug_cache_dir):
    from vlib.analyzers.tools import call_for_each_bug
    results = {}
    call_for_each_bug(bug_cache_dir, partial(get_exploitability, results))

    max_score = max([cl.ranking[0] for cl in results.values() if cl])
    for bug_id_str, cl in results.items():
        if cl:
            results[bug_id_str]['score'] = cl.ranking[0]
        else:
            results[bug_id_str]['score'] = max_score/2

    return results

